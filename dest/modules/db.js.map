{"version":3,"sources":["modules/db.js"],"names":["Promise","DB_PROTOCOL","DB_HOST","DB_PORT","DB_NAME","DB_ACCOUNT","DB_PASS","DB_URL","connect","Schema","discoverySchema","avatar","String","background_image","destinations","hot","Number","id","res_type","title","url","user","user_id","username","vip","Boolean","versionKey","collection","Discovery","model","journalSchema","average","comments","compact","departure_date","Array","duration","favs","gowith","intro","itinerary","label","liked","likes","locations","newest","products","summary","type","Journal","marketSchema","banners","Market","userSchema","phone","password","password_salt","access_token","register_time","last_time","permission","User","smsSchema","vCode","SMS","connection","on","console","log"],"mappings":";;;;;;;AAQA;;;;;;AAEA,mBAASA,OAAT,GAAmBA,OAAnB,C,CAVA;;;;;;;;;AAWA,IAAMC,cAAc,SAApB;AAAA,IAA+B;AAC3BC,UAAU,WADd;AAAA,IAC2B;AACvBC,UAAU,OAFd;AAAA,IAEuB;AACnBC,UAAU,SAHd;AAAA,IAGyB;AACrBC,aAAa,WAJjB;AAAA,IAI8B;AAC1BC,UAAU,QALd;AAAA,IAKwB;AACpB;AACAC,SAASF,cAAcC,OAAd,GACNL,WADM,WACWI,UADX,SACyBC,OADzB,SACoCJ,OADpC,SAC+CC,OAD/C,SAC0DC,OAD1D,GAENH,WAFM,WAEWC,OAFX,SAEsBC,OAFtB,SAEiCC,OAT9C;;AAWA;AACA,mBAASI,OAAT,CAAiBD,MAAjB;;AAEA;AACA,IAAME,SAAS,mBAASA,MAAxB;;AAEA;AACA;AACA,IAAMC,kBAAkB,IAAID,MAAJ,CAAW;AAC/BE,YAAQC,MADuB;AAE/BC,sBAAkBD,MAFa;AAG/BE,kBAAcF,MAHiB;AAI/BG,SAAKC,MAJ0B;AAK/BC,QAAID,MAL2B;AAM/BE,cAAUF,MANqB;AAO/BG,WAAOP,MAPwB;AAQ/BQ,SAAKR,MAR0B;AAS/BS,UAAMT,MATyB;AAU/BU,aAASN,MAVsB;AAW/BO,cAAUX,MAXqB;AAY/BY,SAAKC;AAZ0B,CAAX,EAarB;AACCC,gBAAY,KADb;AAECC,gBAAY;AAFb,CAbqB,CAAxB;AAiBA,IAAMC,YAAY,mBAASC,KAAT,CAAe,WAAf,EAA4BnB,eAA5B,CAAlB;AACA;AACA,IAAMoB,gBAAgB,IAAIrB,MAAJ,CAAW;AAC7BE,YAAQC,MADqB;AAE7BmB,aAASnB,MAFoB;AAG7BC,sBAAkBD,MAHW;AAI7BoB,cAAUhB,MAJmB;AAK7BiB,aAASrB,MALoB;AAM7BsB,oBAAgBtB,MANa;AAO7BE,kBAAcqB,KAPe;AAQ7BC,cAAUpB,MARmB;AAS7BqB,UAAMrB,MATuB;AAU7BsB,YAAQ1B,MAVqB;AAW7BG,SAAKC,MAXwB;AAY7BC,QAAID,MAZyB;AAa7BuB,WAAO3B,MAbsB;AAc7B4B,eAAWL,KAdkB;AAe7BM,WAAO7B,MAfsB;AAgB7B8B,WAAOjB,OAhBsB;AAiB7BkB,WAAOR,KAjBsB;AAkB7BS,eAAW5B,MAlBkB;AAmB7B6B,YAAQV,KAnBqB;AAoB7BW,cAAUrB,OApBmB;AAqB7BsB,aAASnC,MArBoB;AAsB7BO,WAAOP,MAtBsB;AAuB7BoC,UAAMhC,MAvBuB;AAwB7BI,SAAKR,MAxBwB;AAyB7BU,aAASN,MAzBoB;AA0B7BO,cAAUX,MA1BmB;AA2B7BY,SAAKC;AA3BwB,CAAX,EA4BnB;AACCC,gBAAY,KADb;AAECC,gBAAY;AAFb,CA5BmB,CAAtB;AAgCA,IAAMsB,UAAU,mBAASpB,KAAT,CAAe,SAAf,EAA0BC,aAA1B,CAAhB;;AAEA;AACA,IAAMoB,eAAe,IAAIzC,MAAJ,CAAW;AAC5B0C,aAAShB,KADmB;AAE5BrB,kBAAcqB,KAFc;AAG5BW,cAAUX;AAHkB,CAAX,EAIlB;AACCT,gBAAY,KADb;AAECC,gBAAY;AAFb,CAJkB,CAArB;AAQA,IAAMyB,SAAS,mBAASvB,KAAT,CAAe,QAAf,EAAyBqB,YAAzB,CAAf;;AAEA;AACA,IAAMG,aAAa,IAAI5C,MAAJ,CAAW;AAC1B6C,WAAO1C,MADmB,EACX;AACf2C,cAAU3C,MAFgB,EAER;AAClB4C,mBAAe5C,MAHW,EAGH;AACvBW,cAAUX,MAJgB,EAIR;AAClBD,YAAQC,MALkB,EAKV;AAChB6C,kBAAc7C,MANY,EAMJ;AACtB8C,mBAAe1C,MAPW,EAOH;AACvB2C,eAAW3C,MARe,EAQP;AACnB4C,gBAAY5C,MATc,CASP;AATO,CAAX,EAUhB;AACCU,gBAAY,KADb;AAECC,gBAAY;AAFb,CAVgB,CAAnB;AAcA,IAAMkC,OAAO,mBAAShC,KAAT,CAAe,MAAf,EAAuBwB,UAAvB,CAAb;;AAEA;AACA,IAAMS,YAAY,IAAIrD,MAAJ,CAAW;AACzB6C,WAAO1C,MADkB;AAEzBmD,WAAOnD;AAFkB,CAAX,EAGhB;AACEc,gBAAY,KADd;AAEEC,gBAAY;AAFd,CAHgB,CAAlB;AAOA,IAAMqC,MAAM,mBAASnC,KAAT,CAAe,KAAf,EAAsBiC,SAAtB,CAAZ;;AAEA;AACA,mBAASG,UAAT,CACKC,EADL,CACQ,WADR,EACqB;AAAA,WAAKC,QAAQC,GAAR,uCAAgDjE,OAAhD,CAAL;AAAA,CADrB,EAEK+D,EAFL,CAEQ,OAFR,EAEiB;AAAA,WAAKC,QAAQC,GAAR,oCAA6CjE,OAA7C,CAAL;AAAA,CAFjB,EAGK+D,EAHL,CAGQ,cAHR,EAGwB;AAAA,WAAKC,QAAQC,GAAR,0CAAmDjE,OAAnD,CAAL;AAAA,CAHxB;;AAKA;QAEIyB,S,GAAAA,S;QACAqB,O,GAAAA,O;QACAG,M,GAAAA,M;QACAS,I,GAAAA,I;QACAG,G,GAAAA,G","file":"db.js","sourcesContent":["/*\n * 数据库配置模块\n * 数据库连接、集合结构Schema、集合Model实例导出\n * @Author: Cphayim \n * @Date: 2017-04-21 20:28:21 \n * @Last Modified by: Cphayim\n * @Last Modified time: 2017-05-06 23:13:44\n */\nimport mongoose from 'mongoose'\n\nmongoose.Promise = Promise;\nconst DB_PROTOCOL = 'mongodb', // 协议\n    DB_HOST = '127.0.0.1', // 主机名\n    DB_PORT = '27017', // 端口号\n    DB_NAME = 'chufaba', // 数据库名\n    DB_ACCOUNT = 'cfbworker', // 数据库账号\n    DB_PASS = '123456', // 数据库密码\n    // 是否使用 Auth 模式的 URL \n    DB_URL = DB_ACCOUNT && DB_PASS ?\n    `${DB_PROTOCOL}://${DB_ACCOUNT}:${DB_PASS}@${DB_HOST}:${DB_PORT}/${DB_NAME}` :\n    `${DB_PROTOCOL}://${DB_HOST}:${DB_PORT}/${DB_NAME}`;\n\n// 连接数据库\nmongoose.connect(DB_URL);\n\n// 数据库结构映射类\nconst Schema = mongoose.Schema;\n\n// 实例化各数据映射对象\n// 精选 数据集合结构\nconst discoverySchema = new Schema({\n    avatar: String,\n    background_image: String,\n    destinations: String,\n    hot: Number,\n    id: Number,\n    res_type: Number,\n    title: String,\n    url: String,\n    user: String,\n    user_id: Number,\n    username: String,\n    vip: Boolean\n}, {\n    versionKey: false,\n    collection: 'discovery'\n});\nconst Discovery = mongoose.model('Discovery', discoverySchema);\n// 旅游日程 数据集合结构\nconst journalSchema = new Schema({\n    avatar: String,\n    average: String,\n    background_image: String,\n    comments: Number,\n    compact: String,\n    departure_date: String,\n    destinations: Array,\n    duration: Number,\n    favs: Number,\n    gowith: String,\n    hot: Number,\n    id: Number,\n    intro: String,\n    itinerary: Array,\n    label: String,\n    liked: Boolean,\n    likes: Array,\n    locations: Number,\n    newest: Array,\n    products: Boolean,\n    summary: String,\n    title: String,\n    type: Number,\n    url: String,\n    user_id: Number,\n    username: String,\n    vip: Boolean\n}, {\n    versionKey: false,\n    collection: 'journal'\n});\nconst Journal = mongoose.model('Journal', journalSchema);\n\n// 购买 数据集合结构\nconst marketSchema = new Schema({\n    banners: Array,\n    destinations: Array,\n    products: Array\n}, {\n    versionKey: false,\n    collection: 'market'\n});\nconst Market = mongoose.model('Market', marketSchema);\n\n// 用户 数据集合结构\nconst userSchema = new Schema({\n    phone: String, // 手机号码, 辅键, 唯一\n    password: String, // 密码 (前端MD5 -> 后端密码盐+MD5)\n    password_salt: String, // 密码盐 (随机盐)\n    username: String, // 用户名\n    avatar: String, // 头像 URL 地址\n    access_token: String, // 口令 (授权码)，cookie\n    register_time: Number, // 注册时间戳，注册表单接口响应成功时的服务器时间\n    last_time: Number, // 最后登录时间戳，最后一次提交登录表单的服务器时间\n    permission: Number // 权限等级\n}, {\n    versionKey: false,\n    collection: 'user'\n});\nconst User = mongoose.model('User', userSchema);\n\n// 验证码 数据集合结构\nconst smsSchema = new Schema({\n    phone: String,\n    vCode: String,\n},{\n    versionKey: false,\n    collection: 'sms'\n});\nconst SMS = mongoose.model('SMS', smsSchema);\n\n// 连接状态监听\nmongoose.connection\n    .on('connected', _ => console.log(`chufaba mongodb connected, port: ${DB_PORT}`))\n    .on('error', _ => console.log(`chufaba mongodb failed, port: ${DB_PORT}`))\n    .on('disconnected', _ => console.log(`chufaba mongodb disconnected, port: ${DB_PORT}`));\n\n// 模块导出\nexport {\n    Discovery, // 精选列表\n    Journal, // 精选详情\n    Market, // 购买列表\n    User, //用户\n    SMS\n};"]}