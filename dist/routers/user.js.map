{"version":3,"sources":["routers/user.js"],"names":["router","Router","use","post","phoneValidator","req","res","findOne","body","then","data","status","json","code","msg","last_time","Date","getTime","update","$set","catch","dbQueryErr","md5Validator","formData","phone","password","password_salt","loginResponse","repeatabilityValidator","vCodeValidator","vCode","time","userData","getRandomCode","avatar","register_time","permission","user","save","dbWriteErr","access_token","expires","now","cookie","userInfo","username","r","i","Math","random","toString","type","send","apikey","SMS_APIKEY","mobile","text","APP_NAME","end","err","sendSuccessResponse","sms","queryObj","setTimeout","findObj","remove","next","phoneRegexp","test","md5Regexp","length","chars","charAt","floor"],"mappings":"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","file":"user.js","sourcesContent":["/*\n * 用户相关的请求响应路由\n * @Author: Cphayim \n * @Date: 2017-04-21 21:23:45 \n * @Last Modified by: Cphayim\n * @Last Modified time: 2017-05-09 14:14:22\n */\n\nimport express from 'express'\n// 请求转发模块\nimport request from 'superagent'\n// cookie 解析模块\nimport cookieParser from 'cookie-parser'\n// 数据库连接模块\nimport {\n    User,\n    SMS\n} from '../modules/db'\n// 配置模块\nimport config from '../modules/config'\n// MD5 算法模块\nimport {\n    MD5\n} from '../modules/md5'\n// 响应错误信息的模块\nimport errRes from '../modules/err-res'\n\n/*\n * 随机码规范\n * password_salt    16位\n * access_token     32位\n */\n\n// 创建路由\nconst router = express.Router();\nrouter.use(cookieParser());\n\n// access_token 鉴权 [预处理管道: 手机格式验证]\nrouter.post('/token', [phoneValidator], (req, res) => {\n    User.findOne(req.body).then(data => {\n        if (data) {\n            // 通过\n            res.status(200).json({\n                code: 1000,\n                msg: 'auth passed'\n            });\n            // 更新最后登录时间\n            const last_time = new Date().getTime();\n            User.update(data, {\n                $set: {\n                    last_time\n                }\n            }).then(_ => {});\n        } else {\n            // 未通过\n            res.status(200).json({\n                code: 3030,\n                msg: 'invalid access_token'\n            });\n        }\n    }).catch(err => errRes.dbQueryErr(res));\n});\n\n\n// 登录表单响应接口 [预处理管道: 手机格式验证、密码加密验证]\nrouter.post('/login', [phoneValidator, md5Validator], (req, res) => {\n    const formData = req.body;\n    // 数据库查询\n    User.findOne({\n        phone: formData.phone\n    }).then(data => {\n        // 没找到账号 (data:null)\n        if (!data) {\n            res.status(200).json({\n                code: 3020,\n                msg: 'this user is not found'\n            });\n            return;\n        }\n        // 密码校对( 数据库中的用户密码 === MD5(注册时生成的密码盐 + MD5(用户在前端表单输入的密码)) )\n        if (data.password === MD5(data.password_salt + formData.password)) {\n            // 密码校验成功，调用 loginResponse，设置 access_token 并返回用户信息\n            loginResponse(res, data);\n        } else {\n            // 返回密码错误\n            res.status(200).json({\n                code: 3021,\n                msg: 'invalid password'\n            })\n        }\n    }).catch(err => errRes.dbQueryErr(res));\n});\n\n// 注册表单响应接口 [预处理管道: 手机号码验证、账号查重、密码加密验证]\nrouter.post('/register', [phoneValidator, repeatabilityValidator, md5Validator, vCodeValidator], (req, res) => {\n    // 删掉请求体中的验证码的属性\n    delete req.body.vCode;\n    const time = new Date().getTime();\n    // 创建用户对象\n    const userData = req.body;\n    // 生成 16位 密码盐\n    userData.password_salt = getRandomCode(16);\n    // 密码盐 + 密码 => MD5加密\n    userData.password = MD5(userData.password_salt + userData.password);\n    userData.avatar = '/avatar/default.png'; // 默认头像\n    userData.register_time = time; // 注册时间戳\n    userData.last_time = -1; // 最后登录时间戳\n    userData.permission = 0; // 权限等级\n\n    const user = new User(userData);\n    // 写入数据库\n    user.save().then(data => {\n        // 调用 loginResponse，设置 access_token 并返回用户信息\n        loginResponse(res, data);\n    }).catch(err => errRes.dbWriteErr(res));\n});\n\n/**\n * 登录/注册接口公用，登录/注册成功后回调该函数\n * 生成 access_token(通行口令)\n * 返回登录成功的 json 包含用户基本信息\n * @param {Object} res 响应体对象\n * @param {Object} data 数据库用户数据\n */\nfunction loginResponse(res, data) {\n    // 生成 32位 access_token\n    const access_token = getRandomCode(32);\n    const last_time = new Date().getTime();\n    // 更新数据库中的 access_token 和 登录时间\n    User.update(data, {\n        $set: {\n            access_token,\n            last_time\n        }\n    }).then(_ => {\n        const expires = new Date(Date.now() + 30 * 24 * 60 * 60 * 1000);\n        // 网页端设置 cookie (30天有效期) [app 端会跨域，无法使用 cookie]\n        res.cookie('phone', data.phone, {\n            expires\n        });\n        res.cookie('access_token', access_token, {\n            expires\n        });\n        // 返回登录成功\n        res.status(200).json({\n            code: 1000,\n            msg: 'auth passed',\n            userInfo: {\n                phone: data.phone,\n                access_token,\n                username: data.username,\n                avatar: data.avatar\n            }\n        });\n    }).catch(err => errRes.dbWriteErr(res));\n}\n\n// 短信验证码下发请求响应 [预处理管道: 手机格式验证]\nrouter.post('/sms', [phoneValidator], (req, res) => {\n    // 判断是否来自注册表单? 是则进行账号查重\n    req.body.r && repeatabilityValidator(req, res);\n    const phone = req.body.phone;\n    // 生成6位验证码\n    let vCode = '';\n    // 随机数取整 -> 字符串 -> 字符串长度补全 方案 (ES6 API, Babel 无法转换 padStart)\n    // vCode = (~~(Math.random() * 1000000)).toString().padStart(6,'0');\n    // 拼接 方案 (兼容)\n    for (let i = 0; i < 6; i++) {\n        vCode += (~~(Math.random() * 10)).toString();\n    }\n    // 服务器端转发请求到短信验证服务器下发短信验证码\n    request\n        .post('https://sms.yunpian.com/v2/sms/single_send.json')\n        // 请求头设置\n        // .set('Content-Type', 'application/x-www-form-urlencoded; charset=UTF-8')\n        .type('form')\n        .send({\n            apikey: config.SMS_APIKEY, // 短信验证服务器 developer apikey\n            mobile: phone, // 目标手机号码\n            text: `【${config.APP_NAME}】您的验证码是${vCode}。如非本人操作，请忽略本短信` // 短信模板\n        }).end((err, data) => {\n            if (data && data.body && data.body.code === 0) {\n                // 临时存储，写入数据库\n                // 查找有没有该用户的验证码记录？\n                // 存在就更新这条记录，不存在则插入一条\n                SMS.findOne({\n                    phone\n                }).then(data => {\n                    if (data) {\n                        // 更新数据\n                        SMS.update(data, {\n                            $set: {\n                                vCode\n                            }\n                        }).then(data => {\n                            // 回调 sendSuccessResponse 函数\n                            // 返回发送成功，并设置超时删除\n                            sendSuccessResponse(res, {\n                                phone,\n                                vCode\n                            }, 10 * 60 * 1000);\n                        }).catch(err => errRes.dbWriteErr(res));\n                    } else {\n                        // 插入一条\n                        const sms = new SMS({\n                            phone,\n                            vCode\n                        });\n                        sms.save().then(data => {\n                            // 返回发送成功，并设置超时删除\n                            sendSuccessResponse(res, {\n                                phone,\n                                vCode\n                            }, 10 * 60 * 1000);\n                        }).catch(err => errRes.dbWriteErr(res));\n                    }\n                }).catch(err => errRes.dbQueryErr(res));\n            } else {\n                // 发送失败\n                res.status(200).json({\n                    code: 3004,\n                    msg: 'sent failed'\n                });\n            }\n        });\n});\n/**\n * 返回短信下发成功，并设置超时删除的定时器任务\n * @param {Object} queryObj 查询对象 \n * @param {Number} time 时长 \n */\nfunction sendSuccessResponse(res, queryObj, time) {\n    // 返回前端，短信下发成功\n    res.status(200).json({\n        code: 1000,\n        msg: 'sent succeeded'\n    });\n    // 超时后，如果这条数据(根据vCode查找)还存在*就删除它\n    // 若用户在超时范围内再次请求了验证码(更新了记录)，删除它的任务则应该交给下一个响应的定时器\n    setTimeout(_ => {\n        SMS.findObj(queryObj).then(data => {\n            // 存在就删掉它\n            data && SMS.remove(data);\n        });\n    }, time);\n}\n\n/**\n * 数据检测流 \n * (下面的验证函数应在响应前按需添加到'请求处理管线')\n * 用于后端数据二次验证，防止用户绕过前端表单验证发送请求，导致脏数据进入数据库\n * 各环节未通过返回的参数说明\n * 手机号码格式验证未通过  {code: err_phone}\n * 手机号码重复注册       {code: err_repeat}\n * md5 验证未通过        {code: err_md5}\n */\n// 手机号码格式验证\nfunction phoneValidator(req, res, next) {\n    const phoneRegexp = /^0?(13|14|15|18)[0-9]{9}$/;\n    const phone = req.body.phone;\n    // 通过验证？回调下一个检测流函数：返回未通过验证的响应\n    phoneRegexp.test(phone) ? next() : res.status(200).json({\n        code: 3001,\n        msg: 'invalid phone number format'\n    });\n}\n// 号码查重 (用于注册表单响应)\nfunction repeatabilityValidator(req, res, next) {\n    const phone = req.body.phone;\n    // 数据库查询\n    User.findOne({\n        phone\n    }).then(data => {\n        // 是否没有数据? (是否传入 next 函数?回调下一个检测流函数:不处理): 返回号码重复\n        !data ? (next ? next() : '') : res.status(200).json({\n            code: 3011,\n            msg: 'repeat phone number'\n        })\n    }).catch(err => {\n        errRes.dbQueryErr(res);\n    });\n}\n// 密码 md5 验证 (验证前端发送过来的密码是否使用了 32位 md5加密)\nfunction md5Validator(req, res, next) {\n    // 判断请求的表单数据密码是否 为32位 hash\n    const md5Regexp = /^[0-9a-z]{32}$/;\n    const password = req.body.password;\n    md5Regexp.test(password) ? next() : res.status(200).json({\n        code: 3003,\n        msg: 'invalid password md5'\n    });\n}\n// 短信验证码 验证\nfunction vCodeValidator(req, res, next) {\n    // 查找该验证码的记录\n    SMS.findOne({\n        phone: req.body.phone,\n        vCode: req.body.vCode\n    }).then(data => {\n        if (data) {\n            next(); // 回调下一个检测流函数\n        } else {\n            res.status(200).json({\n                code: 3005,\n                msg: 'invalid vCode'\n            });\n        }\n    }).catch(err => errRes.dbQueryErr(res));\n}\n\n\n// 工具 函数\n/**\n * 生成随机码\n * @param {Number} length 随机码长度\n * @returns 随机码字符串\n * getRandomCode(16) -> XGpU%FpjzV*7uSzP\n */\nfunction getRandomCode(length) {\n    let code = '';\n    const chars = \"~!@#$%^&*()_+,.?<>0123456789abcdefghijkmnpqrstuvwxyzABCDEFGHJKMNPQRSTUVWXYZ\";\n    for (let i = 0; i < length; i++) {\n        code += chars.charAt(Math.floor(Math.random() * chars.length));\n    }\n    return code;\n}\n\n// 导出模块\nexport default router;"]}